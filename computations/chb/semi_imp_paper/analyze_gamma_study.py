#!/usr/bin/env python3
"""
Gamma Study Analysis Script

This script reads the Excel files generated by the gamma parameter study,
calculates total simulation time and iteration counts, and creates plots
showing the performance metrics for different gamma values and simulation methods.

Author: Auto-generated analysis script for CHB gamma study
"""

from pathlib import Path
from typing import Dict, Optional

import matplotlib.pyplot as plt
import numpy as np
import pandas as pd

# Configuration
GAMMA_VALUES = [0.25, 0.5, 1, 2, 4, 8]
OUTPUT_DIR = Path("../output/log")
SCRIPT_NAMES = [
    "chb_monolithic_semi_imp",
    "chb_monolithic_imp",
    "chb_splitting_ch_biot_semi_imp",
    "chb_splitting_ch_biot_imp",
    "chb_splitting_ch_fixedstress_semi_imp",
    "chb_splitting_ch_fixedstress_imp",
]

# Color scheme for different methods
COLORS = {
    "chb_monolithic_semi_imp": "#1f77b4",  # Blue
    "chb_monolithic_imp": "#ff7f0e",  # Orange
    "chb_splitting_ch_biot_semi_imp": "#2ca02c",  # Green
    "chb_splitting_ch_biot_imp": "#d62728",  # Red
    "chb_splitting_ch_fixedstress_semi_imp": "#9467bd",  # Purple
    "chb_splitting_ch_fixedstress_imp": "#8c564b",  # Brown
}

# Pretty names for plotting
PRETTY_NAMES = {
    "chb_monolithic_semi_imp": "Monolithic Semi-Imp",
    "chb_monolithic_imp": "Monolithic Implicit",
    "chb_splitting_ch_biot_semi_imp": "Biot Split Semi-Imp",
    "chb_splitting_ch_biot_imp": "Biot Split Implicit",
    "chb_splitting_ch_fixedstress_semi_imp": "Fixed-Stress Semi-Imp",
    "chb_splitting_ch_fixedstress_imp": "Fixed-Stress Implicit",
}


def find_excel_files() -> Dict[str, Dict[float, str]]:
    """
    Find all Excel files generated by the gamma study.

    Returns:
        Dictionary mapping script names to gamma values to file paths
    """
    files_found = {}

    for script_name in SCRIPT_NAMES:
        files_found[script_name] = {}

        for gamma in GAMMA_VALUES:
            # Expected filename pattern: script_name_gamma_X.xlsx
            filename = f"{script_name}_gamma_{gamma}.xlsx"
            filepath = OUTPUT_DIR / filename

            if filepath.exists():
                files_found[script_name][gamma] = str(filepath)
                print(f"✓ Found: {filename}")
            else:
                print(f"✗ Missing: {filename}")

    return files_found


def read_excel_data(filepath: str) -> Optional[pd.DataFrame]:
    """
    Read Excel file and return DataFrame.

    Args:
        filepath: Path to Excel file

    Returns:
        DataFrame or None if reading fails
    """
    try:
        df = pd.read_excel(filepath, sheet_name="Simulation_Log")
        return df
    except Exception as e:
        print(f"Error reading {filepath}: {e}")
        return None


def calculate_metrics(df: pd.DataFrame) -> Dict[str, float]:
    """
    Calculate performance metrics from simulation data.

    Args:
        df: DataFrame with simulation log data

    Returns:
        Dictionary with calculated metrics
    """
    if df is None or df.empty:
        return {
            "total_time": 0,
            "total_iterations": 0,
            "num_time_steps": 0,
            "avg_iterations_per_step": 0,
        }

    # Calculate total simulation time (assuming 'Time' column exists)
    if "Time" in df.columns:
        total_time = df["Time"].max() - df["Time"].min() if len(df) > 1 else 0
    else:
        total_time = 0

    # Calculate total iterations
    if "Iterations" in df.columns:
        total_iterations = df["Iterations"].sum()
    else:
        total_iterations = 0

    # Number of time steps
    num_time_steps = len(df)

    # Average iterations per time step
    avg_iterations_per_step = (
        total_iterations / num_time_steps if num_time_steps > 0 else 0
    )

    return {
        "total_time": total_time,
        "total_iterations": total_iterations,
        "num_time_steps": num_time_steps,
        "avg_iterations_per_step": avg_iterations_per_step,
    }


def analyze_all_files(
    files_found: Dict[str, Dict[float, str]],
) -> Dict[str, Dict[float, Dict]]:
    """
    Analyze all found Excel files and calculate metrics.

    Args:
        files_found: Dictionary of found files

    Returns:
        Dictionary with all calculated metrics
    """
    results = {}

    for script_name in files_found:
        results[script_name] = {}

        for gamma, filepath in files_found[script_name].items():
            print(f"\nAnalyzing {script_name} with gamma={gamma}...")

            df = read_excel_data(filepath)
            metrics = calculate_metrics(df)
            results[script_name][gamma] = metrics

            print(f"  Total time: {metrics['total_time']:.3f}")
            print(f"  Total iterations: {metrics['total_iterations']}")
            print(f"  Time steps: {metrics['num_time_steps']}")
            print(f"  Avg iterations/step: {metrics['avg_iterations_per_step']:.2f}")

    return results


def create_performance_plots(results: Dict[str, Dict[float, Dict]]) -> None:
    """
    Create plots showing performance metrics vs gamma values.

    Args:
        results: Dictionary with all calculated metrics
    """
    # Set up the plotting style
    plt.rcParams.update({"font.size": 12})

    # Create figure with subplots
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(15, 12))
    fig.suptitle(
        "CHB Gamma Parameter Study - Performance Analysis",
        fontsize=16,
        fontweight="bold",
    )

    # Prepare data for plotting
    gamma_vals = sorted(GAMMA_VALUES)
    x_pos = np.arange(len(gamma_vals))
    bar_width = 0.12  # Width of bars

    # Plot 1: Total Simulation Time
    ax1.set_title("Total Simulation Time vs Gamma", fontweight="bold")
    for i, script_name in enumerate(SCRIPT_NAMES):
        if script_name in results:
            times = []
            for gamma in gamma_vals:
                if gamma in results[script_name]:
                    times.append(results[script_name][gamma]["total_time"])
                else:
                    times.append(0)

            offset = (i - len(SCRIPT_NAMES) / 2 + 0.5) * bar_width
            bars = ax1.bar(
                x_pos + offset,
                times,
                bar_width,
                label=PRETTY_NAMES[script_name],
                color=COLORS[script_name],
                alpha=0.8,
            )

            # Add value labels on bars
            for bar, time_val in zip(bars, times):
                if time_val > 0:
                    ax1.text(
                        bar.get_x() + bar.get_width() / 2.0,
                        bar.get_height() + max(times) * 0.01,
                        f"{time_val:.2f}",
                        ha="center",
                        va="bottom",
                        fontsize=8,
                        rotation=90,
                    )

    ax1.set_xlabel("Gamma Value")
    ax1.set_ylabel("Total Time")
    ax1.set_xticks(x_pos)
    ax1.set_xticklabels([str(g) for g in gamma_vals])
    ax1.legend(bbox_to_anchor=(1.05, 1), loc="upper left")
    ax1.grid(True, alpha=0.3)

    # Plot 2: Total Iterations
    ax2.set_title("Total Iterations vs Gamma", fontweight="bold")
    for i, script_name in enumerate(SCRIPT_NAMES):
        if script_name in results:
            iterations = []
            for gamma in gamma_vals:
                if gamma in results[script_name]:
                    iterations.append(results[script_name][gamma]["total_iterations"])
                else:
                    iterations.append(0)

            offset = (i - len(SCRIPT_NAMES) / 2 + 0.5) * bar_width
            bars = ax2.bar(
                x_pos + offset,
                iterations,
                bar_width,
                label=PRETTY_NAMES[script_name],
                color=COLORS[script_name],
                alpha=0.8,
            )

            # Add value labels on bars
            for bar, iter_val in zip(bars, iterations):
                if iter_val > 0:
                    ax2.text(
                        bar.get_x() + bar.get_width() / 2.0,
                        bar.get_height() + max(iterations) * 0.01,
                        f"{iter_val}",
                        ha="center",
                        va="bottom",
                        fontsize=8,
                        rotation=90,
                    )

    ax2.set_xlabel("Gamma Value")
    ax2.set_ylabel("Total Iterations")
    ax2.set_xticks(x_pos)
    ax2.set_xticklabels([str(g) for g in gamma_vals])
    ax2.legend(bbox_to_anchor=(1.05, 1), loc="upper left")
    ax2.grid(True, alpha=0.3)

    # Plot 3: Average Iterations per Time Step
    ax3.set_title("Average Iterations per Time Step vs Gamma", fontweight="bold")
    for i, script_name in enumerate(SCRIPT_NAMES):
        if script_name in results:
            avg_iters = []
            for gamma in gamma_vals:
                if gamma in results[script_name]:
                    avg_iters.append(
                        results[script_name][gamma]["avg_iterations_per_step"]
                    )
                else:
                    avg_iters.append(0)

            offset = (i - len(SCRIPT_NAMES) / 2 + 0.5) * bar_width
            bars = ax3.bar(
                x_pos + offset,
                avg_iters,
                bar_width,
                label=PRETTY_NAMES[script_name],
                color=COLORS[script_name],
                alpha=0.8,
            )

            # Add value labels on bars
            for bar, avg_val in zip(bars, avg_iters):
                if avg_val > 0:
                    ax3.text(
                        bar.get_x() + bar.get_width() / 2.0,
                        bar.get_height() + max(avg_iters) * 0.01,
                        f"{avg_val:.1f}",
                        ha="center",
                        va="bottom",
                        fontsize=8,
                        rotation=90,
                    )

    ax3.set_xlabel("Gamma Value")
    ax3.set_ylabel("Avg Iterations/Step")
    ax3.set_xticks(x_pos)
    ax3.set_xticklabels([str(g) for g in gamma_vals])
    ax3.legend(bbox_to_anchor=(1.05, 1), loc="upper left")
    ax3.grid(True, alpha=0.3)

    # Plot 4: Number of Time Steps (should be constant but good to verify)
    ax4.set_title("Number of Time Steps vs Gamma", fontweight="bold")
    for i, script_name in enumerate(SCRIPT_NAMES):
        if script_name in results:
            time_steps = []
            for gamma in gamma_vals:
                if gamma in results[script_name]:
                    time_steps.append(results[script_name][gamma]["num_time_steps"])
                else:
                    time_steps.append(0)

            offset = (i - len(SCRIPT_NAMES) / 2 + 0.5) * bar_width
            bars = ax4.bar(
                x_pos + offset,
                time_steps,
                bar_width,
                label=PRETTY_NAMES[script_name],
                color=COLORS[script_name],
                alpha=0.8,
            )

            # Add value labels on bars
            for bar, steps_val in zip(bars, time_steps):
                if steps_val > 0:
                    ax4.text(
                        bar.get_x() + bar.get_width() / 2.0,
                        bar.get_height() + max(time_steps) * 0.01,
                        f"{steps_val}",
                        ha="center",
                        va="bottom",
                        fontsize=8,
                        rotation=90,
                    )

    ax4.set_xlabel("Gamma Value")
    ax4.set_ylabel("Number of Time Steps")
    ax4.set_xticks(x_pos)
    ax4.set_xticklabels([str(g) for g in gamma_vals])
    ax4.legend(bbox_to_anchor=(1.05, 1), loc="upper left")
    ax4.grid(True, alpha=0.3)

    plt.tight_layout()

    # Save the plot
    output_plot_path = OUTPUT_DIR / "gamma_study_performance_analysis.png"
    plt.savefig(output_plot_path, dpi=300, bbox_inches="tight")
    print(f"\n📊 Performance plots saved to: {output_plot_path}")

    plt.show()


def create_summary_table(results: Dict[str, Dict[float, Dict]]) -> pd.DataFrame:
    """
    Create a summary table of all results.

    Args:
        results: Dictionary with all calculated metrics

    Returns:
        Summary DataFrame
    """
    summary_data = []

    for script_name in SCRIPT_NAMES:
        if script_name in results:
            for gamma in sorted(GAMMA_VALUES):
                if gamma in results[script_name]:
                    metrics = results[script_name][gamma]
                    summary_data.append(
                        {
                            "Method": PRETTY_NAMES[script_name],
                            "Gamma": gamma,
                            "Total_Time": metrics["total_time"],
                            "Total_Iterations": metrics["total_iterations"],
                            "Time_Steps": metrics["num_time_steps"],
                            "Avg_Iter_Per_Step": metrics["avg_iterations_per_step"],
                        }
                    )

    df_summary = pd.DataFrame(summary_data)

    # Save summary table
    summary_path = OUTPUT_DIR / "gamma_study_summary.xlsx"
    df_summary.to_excel(summary_path, index=False, sheet_name="Summary")
    print(f"📋 Summary table saved to: {summary_path}")

    return df_summary


def print_summary_stats(results: Dict[str, Dict[float, Dict]]) -> None:
    """
    Print summary statistics to console.

    Args:
        results: Dictionary with all calculated metrics
    """
    print("\n" + "=" * 80)
    print("GAMMA STUDY PERFORMANCE SUMMARY")
    print("=" * 80)

    for script_name in SCRIPT_NAMES:
        if script_name in results and results[script_name]:
            print(f"\n📊 {PRETTY_NAMES[script_name]}:")
            print("-" * 50)

            total_times = [
                results[script_name][gamma]["total_time"]
                for gamma in results[script_name]
            ]
            total_iters = [
                results[script_name][gamma]["total_iterations"]
                for gamma in results[script_name]
            ]

            if total_times and total_iters:
                print(f"   Time range: {min(total_times):.3f} - {max(total_times):.3f}")
                print(f"   Iteration range: {min(total_iters)} - {max(total_iters)}")
                print(
                    f"   Available gamma values: {sorted(results[script_name].keys())}"
                )


def main():
    """Main execution function."""
    print("=" * 80)
    print("CHB Gamma Parameter Study - Performance Analysis")
    print("=" * 80)
    print(f"Looking for Excel files in: {OUTPUT_DIR.absolute()}")
    print(f"Expected gamma values: {GAMMA_VALUES}")
    print(f"Expected methods: {len(SCRIPT_NAMES)}")
    print("=" * 80)

    # Check if output directory exists
    if not OUTPUT_DIR.exists():
        print(f"❌ Output directory not found: {OUTPUT_DIR}")
        print("Please run the gamma study first using run_gamma_study.py")
        return

    # Find all Excel files
    files_found = find_excel_files()

    # Check if any files were found
    total_files = sum(len(files) for files in files_found.values())
    if total_files == 0:
        print("\n❌ No Excel files found!")
        print("Please run the gamma study first using run_gamma_study.py")
        return

    print(f"\n✓ Found {total_files} Excel files to analyze")

    # Analyze all files
    print("\n" + "=" * 50)
    print("ANALYZING EXCEL FILES")
    print("=" * 50)

    results = analyze_all_files(files_found)

    # Create performance plots
    print("\n" + "=" * 50)
    print("CREATING PERFORMANCE PLOTS")
    print("=" * 50)

    create_performance_plots(results)

    # Create summary table
    print("\n" + "=" * 50)
    print("CREATING SUMMARY TABLE")
    print("=" * 50)

    # Print summary statistics
    print_summary_stats(results)

    print("\n" + "=" * 80)
    print("ANALYSIS COMPLETE")
    print("=" * 80)
    print("Generated files:")
    print(
        f"  📊 Performance plots: {OUTPUT_DIR / 'gamma_study_performance_analysis.png'}"
    )
    print(f"  📋 Summary table: {OUTPUT_DIR / 'gamma_study_summary.xlsx'}")
    print("=" * 80)


if __name__ == "__main__":
    main()
